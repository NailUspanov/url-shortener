// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlService is a mock of UrlService interface.
type MockUrlService struct {
	ctrl     *gomock.Controller
	recorder *MockUrlServiceMockRecorder
}

// MockUrlServiceMockRecorder is the mock recorder for MockUrlService.
type MockUrlServiceMockRecorder struct {
	mock *MockUrlService
}

// NewMockUrlService creates a new mock instance.
func NewMockUrlService(ctrl *gomock.Controller) *MockUrlService {
	mock := &MockUrlService{ctrl: ctrl}
	mock.recorder = &MockUrlServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlService) EXPECT() *MockUrlServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUrlService) Create(longUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", longUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUrlServiceMockRecorder) Create(longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrlService)(nil).Create), longUrl)
}

// Find mocks base method.
func (m *MockUrlService) Find(shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUrlServiceMockRecorder) Find(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUrlService)(nil).Find), shortUrl)
}
